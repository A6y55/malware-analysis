from Configure import Configure
from PEModel import PEModel
from PEDataSet import PEDataSet
import os
import torch
from torch.utils.data import DataLoader
 
 
def train(epoch):
    for batch_idx, data in enumerate(train_loader, 0):
        optimizer.zero_grad()  # 梯度清0
 
        inputs, labels = data
        inputs, labels = inputs.to(device).float(), labels.to(device)

        if labels.dim() > 1:
            labels = torch.argmax(labels, dim=1)

        y_pred = modeler(inputs)                                    # 前向传播
        loss = torch.nn.functional.cross_entropy(y_pred, labels)    # 计算损失
        if batch_idx % 100 == 99:
            print("epoch=%d, loss=%f" % (epoch, loss.item()))
 
        loss.backward()  # 反向传播
        optimizer.step()  # 梯度更新
 
 
def test():
    correct = 0
    total = 0
    with torch.no_grad():
        for data in test_loader:
            inputs, target = data
            inputs, target = inputs.to(device), target.to(device)
            outputs = modeler(inputs)
            _, predicted = torch.max(outputs.data, dim=1)
            total += target.size(0)
            correct += (predicted == target).sum()
    acc = 1.0 * 100 * correct / total
    print('测试集准确率: %f%% [%d/%d]' % (acc, correct, total))
 
 
if __name__ == '__main__':
    os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
    os.environ["CUDA_VISIBLE_DEVICES"] = "0"
 
    conf = Configure()
 
    train_dataset = PEDataSet(conf.train_path, True)
    train_loader = DataLoader(train_dataset, batch_size=conf.batch_size, shuffle=True, num_workers=2)
 
    test_dataset = PEDataSet(conf.test_path, False)
    test_loader = DataLoader(test_dataset, batch_size=conf.batch_size, shuffle=False, num_workers=2)
 
    modeler = PEModel()
 
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    modeler.to(device)
 
    optimizer = torch.optim.SGD(modeler.parameters(), lr=conf.lr,
                                weight_decay=conf.decay, momentum=conf.momentum)
 
    print("========开始训练模型========")
    for i in range(conf.epochs):
        train(i)
    print("========模型训练完成========")

    torch.save(modeler.state_dict(), 'model.pth')


    print("========开始测试模型========")
    test()
    print("========模型测试完成========")